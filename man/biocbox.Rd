% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/biocbox.R, R/fdge-base.R
\name{biocbox.FacileLinearModelDefinition}
\alias{biocbox.FacileLinearModelDefinition}
\alias{biocbox.FacileDgeAnalysisResult}
\title{Construct a bioconductor classed object from an analysis.}
\usage{
\method{biocbox}{FacileLinearModelDefinition}(
  x,
  assay_name = NULL,
  method = NULL,
  features = NULL,
  filter = "default",
  filter_universe = NULL,
  filter_require = NULL,
  with_sample_weights = FALSE,
  weights = NULL,
  block = NULL,
  prior_count = 0.1,
  ...
)

\method{biocbox}{FacileDgeAnalysisResult}(x, cached = TRUE, ...)
}
\arguments{
\item{assay_name}{the name of the assay to pull data for}

\item{method}{the name of the dge method that will be used. This will dictate
the post-processing of the data}

\item{filter}{A filtering policy to remove unintereesting genes.
If \code{"default"} (which is the default), then \code{\link[edgeR:filterByExpr]{edgeR::filterByExpr()}} is
used if we are materializing a \code{DGEList}, otherwise lowly expressed
features are removed in a similarly "naive" manner. This can,
alternatively, be a character vector that holds the names of the features
that should be kept. Default value: \code{"default"}.}

\item{with_sample_weights}{Some methods that leverage the limma pipeline,
like \code{"voom"}, \code{"limma"}, and \code{"limma-trend"} can leverage sample (array)
quality weights to downweight outlier samples. In the case of
\code{method == "voom"}, we use \code{\link[limma:voomWithQualityWeights]{limma::voomWithQualityWeights()}}, while the
rest use \code{\link[limma:arrayWeights]{limma::arrayWeights()}}. The choice of \code{method} determines which
sample weighting function to sue. Defaults to \code{FALSE}.}

\item{prior_count}{The pseudo-count to add to count data. Used primarily
when running the \code{limma-trend} method on count (RNA-seq) data.}

\item{...}{passed down to internal modeling and filtering functions.}

\item{sample_info}{a \code{facile_frame} that enumerates the samples to fetch
data for, as well as the covariates used in downstream analysis}
}
\value{
a DGEList or EList with assay data in the correct place, and all of
the covariates in the \verb{$samples} or \verb{$targerts} data.frame that are requied
to test the model in \code{mdef}.
}
\description{
Construct a bioconductor classed object from an analysis.
}
\section{Linear Model Definitions}{

This function accepts a model defined using using \code{\link[=flm_def]{flm_def()}} and
creates the appropriate Bioconductor assay container to test the model
given the \code{assay_name} and dge \code{method} specified by the user.

This function currently supports retrieving data and whipping it into
a DGEList (for count-like data) and an EList for data that can be analyzed
with one form limma or another.

Assumptions on different \code{assay_type} values include:
\itemize{
\item \code{rnaseq}: assumed to be "vanilla" bulk rnaseq gene counts
\item \code{umi}: data from bulk rnaseq, UMI data, like quantseq
\item \code{tpm}: TPM values. These will be \code{log2(TPM + prior_count)} transformed,
then differentially tested using the limma-trended pipeline
}

TODO: support affymrna, affymirna, etc. assay types

The "filter" parameters are described in the \code{\link[=fdge]{fdge()}} function for now.
}

\section{FacileDgeAnalysisResult}{

Given a FacileDgeAnalysisResult, we can re-materialize the Bioconductor assay
container used within the differential testing pipeline used from \code{\link[=fdge]{fdge()}}.
Currently we have limited our analysis framework to either work over DGEList
(edgeR) or EList (limma) containers.
}

